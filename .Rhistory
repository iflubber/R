iris
qqline(iris$Sepal.Length)
attach(iris)
qqline(Sepal.Length)
library(readxl)
CEO_Compensation <- read_excel("Downloads/Datasets/CEO-Compensation.xlsx")
View(CEO_Compensation)
attach(CEO_Compensation)
qqnorm(Compensation)
qqline(Compensation)
pnorm(9,7,2)
rnorm(200,7,2)
x<-rnorm(200,7,2)
mean(x)
qqnorm(x)
qqline(x)
library(readxl)
Coffee <- read_excel("Desktop/Great Lakes/SMDM/Coffee.xlsx")
View(Coffee)
table(Brand)
table(Coffee$Brand)
table(Coffee$Loyalty)
table(Coffee$Price_Conscious)
table(Coffee$IDNo)
plot(Coffee$IDNo, Coffee$Brand)
barplot(Coffee$IDNo)
barplot(table(Coffee$IDNo)
)
hist(Coffee$IDNo)
summary(Coffee$Price_per_Packet)
mean(Coffee$No_of_Packet)
mean(Coffee$Days_between_Purchase)
mean(Coffee$Household_Sz)
median(Coffee$Household_Sz)
median(Coffee$No_of_Packet)
median(Coffee$SEC)
median(Coffee$Income)
qqnorm(Coffee$Days_between_Purchase)
qqline(Coffee$Days_between_Purchase)
mean(Coffee$Days_between_Purchase)
median(Coffee$Days_between_Purchase)
summary(Coffee)
library("factoextra");
install.packages("drat", repos="https://cran.rstudio.com")
drat:::addRepo("dmlc")
install.packages("mxnet")
cran <- getOption("repos")
cran["dmlc"] <- "https://s3-us-west-2.amazonaws.com/apache-mxnet/R/CRAN/")
cran["dmlc"] <- "https://s3-us-west-2.amazonaws.com/apache-mxnet/R/CRAN/"
options(repos = cran)
install.packages("mxnet",dependencies = T)
install.packages(rpart)
install.packages("rpart")
install.packages("C50")
install.packages("DMwR")
install.packages("caTools")
install.packages("ROCR")
install.packages("vegan")
install.packages("kernlab")
install.packages("fpc")
install.packages("factoextra")
install.packages("pvclust")
install.packages("reshape2")
install.packages("lsa")
install.packages("dummies")
install.packages("ada")
install.packages("randomForest")
install.packages("infotheo")
install.packages("xgboost")
install.packages("methods")
install.packages("methods")
install.packages("methods")
install.packages("methods")
install.packages("methods")
install.packages("methods")
install.packages("neuralnet")
library(mxnet)
library("mxnet")
library("neuralnet")
install.packages("vegan")
install.packages("gfortran")
library(factoextra)
library(rpart)
library(C50)
library(DMwR)
library(caTools)
library(ROCR)
library(vegan)
install.packages(vegan)
install.packages("vegan")
install.packages("gfortran")
install.packages("vegan")
library(vegan)
install.packages("kernlab")
library(kernlab)
library(fpc)
install.packages("fpc")
library(factoextra)
library(pvclust)
library(reshape2)
library(lsa)
library(dummies)
library(ada)
library(randomForest)
library(infotheo)
library(xgboost)
install.packages("xgboost")
library(xgboost)
library(methods)
library(neuralnet)
install.packages("drat", repos="https://cran.rstudio.com")
drat:::addRepo("dmlc")
install.packages("mxnet")
cran <- getOption("repos")
cran["dmlc"] <- "https://s3-us-west-2.amazonaws.com/apache-mxnet/R/CRAN/"
options(repos = cran)
install.packages("mxnet",dependencies = T)
install.packages("mxnet",dependencies = T)
install.packages("xgboost")
install.packages("xgboost")
install.packages("xgboost")
library(vegan)
library(kernlab)
library(fpc)
library(xgboost)
install.packages("mxnet",dependencies = T)
cran <- getOption("repos")
cran["dmlc"] <- "https://s3-us-west-2.amazonaws.com/apache-mxnet/R/CRAN/"
options(repos = cran)
install.packages("mxnet",dependencies = T)
library(mxnet)
install.packages("mxnet")
install.packages("drat", repos="https://cran.rstudio.com")
drat:::addRepo("dmlc")
install.packages("mxnet")
cran <- getOption("repos")
cran["dmlc"] <- "https://s3-us-west-2.amazonaws.com/apache-mxnet/R/CRAN/"
options(repos = cran)
install.packages("mxnet",dependencies = T)
library(methods)
library(mxnet)
library("mxnet")
cran <- getOption("repos")
cran["dmlc"] <- "https://apache-mxnet.s3-accelerate.dualstack.amazonaws.com/R/CRAN/"
options(repos = cran)
install.packages("mxnet")
library("mxnet")
library("mxnet")
library(mxnet)
library(DiagrammeR)
require(devtools)
require(DiagrammeR)
install.packages("mxnet")
cran <- getOption("repos")
cran["dmlc"] <- "https://s3-us-west-2.amazonaws.com/apache-mxnet/R/CRAN/"
options(repos = cran)
install.packages("mxnet",dependencies = T)
library(mxnet)
require(DiagrammeR)
library(mxnet)
install.packages("https://github.com/jeremiedb/mxnet_winbin/raw/master/mxnet.zip",repos=NULL)
install.packages("mxnet",dependencies = T)
library(mxnet)
cran <- getOption("repos")
cran["dmlc"] <- "https://apache-mxnet.s3-accelerate.dualstack.amazonaws.com/R/CRAN/"
options(repos = cran)
install.packages("mxnet")
library(mxnet)
library(rpart)
library(C50)
library(DMwR)
library(caTools)
library(ROCR)
library(vegan)
library(kernlab)
library(fpc)
library(factoextra)
library(pvclust)
library(reshape2)
library(lsa)
library(dummies)
library(ada)
library(randomForest)
library(infotheo)
library(xgboost)
library(methods)
library(neuralnet)
install.packages("factoextra")
library(factoextra)
library(rpart)
library(C50)
install.packages("C50")
library(C50)
library(DMwR)
install.packages("DMwR")
library(DMwR)
library(caTools)
library(ROCR)
library(vegan)
install.packages("vegan")
library(vegan)
library(kernlab)
library(fpc)
library(factoextra)
library(pvclust)
install.packages("pvclust")
library(pvclust)
library(reshape2)
library(lsa)
install.packages("lsa")
library(lsa)
library(dummies)
install.packages("dummies")
library(dummies)
library(ada)
install.packages("ada")
library(ada)
library(randomForest)
install.packages("randomForest")
library(randomForest)
library(infotheo)
install.packages("infotheo")
library(infotheo)
library(xgboost)
install.packages("xgboost")
library(xgboost)
library(methods)
library(neuralnet)
install.packages("neuralnet")
library(neuralnet)
library(mxnet)
install.packages("mxnet")
cran <- getOption("repos")
cran["dmlc"] <- "https://s3-us-west-2.amazonaws.com/apache-mxnet/R/CRAN/"
options(repos = cran)
install.packages("mxnet",dependencies = T)
cran <- getOption("repos")
cran["dmlc"] <- "https://apache-mxnet.s3-accelerate.dualstack.amazonaws.com/R/CRAN/"
options(repos = cran)
install.packages("mxnet")
library(rgl)
install.packages("rgl")
rm(list=ls(all=TRUE))
# To specify seeds
set.seed(8953)
# Taking iris data
data <- iris
head(data)
# Drop class labels (Species)
data$Species <- NULL
head(data)
dim(data)
# Running kmeans
clus <- kmeans(data, 3)
clus
clus$cluster
table(clus$cluster)
clus$size
# Understand scale function
x <- matrix(1:10, ncol = 2)
x
scale(x, scale = FALSE)
rm(x)
# Calculation of cluster centers
x = split(data, clus$cluster)
x
class(x)
class(x[[1]])
sapply(x, function(x) scale(x, scale = FALSE))
rm(x)
clus$centers
# Calculation of betweenss
clus$cluster
clus$centers
x = clus$centers[clus$cluster,]
x
scale(x, scale = FALSE)
scale(x, scale = FALSE)^2
sum(scale(x, scale = FALSE)^2)
rm(x)
clus$betweenss
# Calculation of withinss
x = split(data, clus$cluster)
sapply(x, function(x) sum(scale(x, scale = FALSE)^2))
rm(x)
clus$withinss
# Calculation of total withinss
sum(clus$withinss)
clus$tot.withinss
# Calculation of totalss
clus$tot.withinss +  clus$betweenss
clus$totss
# Check clustering result against class labels (Species)
table(clus$clus, iris$Species)
# Observation
#   Class "setosa" can be easily separated from the other clusters
#   Classes "versicolor" and "virginica" are to a small degree overlapped with each other.
plot(data[c("Sepal.Length", "Sepal.Width")], col = clus$cluster)
library(car)
library(rgl)
scatter3d(x=iris$Sepal.Length,y=iris$Sepal.Width,z=iris$Petal.Length,groups=as.factor(clus$cluster),grid=FALSE,surface=FALSE)
library(rgl)
# ================================================================
rm(list=ls(all=TRUE))
data = read.csv("Survey.csv",1)
setwd("~/R")
# ================================================================
rm(list=ls(all=TRUE))
data = read.csv("Survey.csv",1)
attach(data)
cortest.bartlett(data,n=329,diag=TRUE)
library(psych)
cortest.bartlett(data,n=329,diag=TRUE)
test = cortest.bartlett(data,n=329,diag=TRUE)
test
if(test$p.value < 0.05)
{
print("variables are correlated")
}else
{
print("variables are not correlated")
}
# KMO test
KMO(data)
# KMO test
kmotest = KMO(data)
kmotest
if(kmotest$MSA >=0.5)
{
print("Sampling is adequate")
} else {
print("Sampling is not adequate")
}
#===========================================================
rm(list=ls(all=TRUE))
library(factoextra)
library(psych)
data = read.csv("risk.csv",1)
attach(data)
new_data = data[,-1]
new_data
# KMO test - check if factor analysis can be performed
kmotest = KMO(new_data)
kmotest
if(kmotest$MSA >=0.5)
{
print("Sampling is adequate")
} else {
print("Sampling is not adequate")
}
# extract the principal components
pca = princomp(new_data,cor = TRUE,scores = FALSE)
summary(pca)
# scree plot
fviz_eig(pca)
# factor analysis with 6 factors
fa6 = factanal(new_data,factors = 6,rotation = "varimax")
# factor analysis with 3 factors without rotation
fa3 = factanal(new_data,factors = 3)
fa3
fa4 = factanal(new_data,factors = 4)
fa4
# factor analysis with 4 factors with rotation
fa4 = factanal(new_data,factors = 4,rotation = "varimax")
fa4
fa5 = factanal(new_data,factors = 5)
